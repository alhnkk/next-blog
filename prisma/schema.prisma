// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id           Int       @id @default(autoincrement())
  title        String
  content      String?
  slug         String    @unique
  excerpt      String?
  featured     Boolean   @default(false)
  featuredImage String?
  status       PostStatus @default(DRAFT)
  tags         String[]
  authorId     String
  categoryId   Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  comments   Comment[]
  likes      Like[]
  
  @@map("post")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  posts       Post[]
  
  @@map("category")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  String
  postId    Int
  parentId  Int?
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  likes     CommentLike[]
  
  @@map("comment")
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@map("like")
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    String
  commentId Int
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, commentId])
  @@map("comment_like")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  bio           String?
  location      String?
  phone         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  commentLikes  CommentLike[]
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  
  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?
  
  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  
  @@map("account")
}

model Message {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String?
  content   String
  read      Boolean  @default(false)
  replied   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("message")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
  
  @@map("verification")
}

model Settings {
  id          Int      @id @default(autoincrement())
  siteName    String   @default("Next Blog")
  siteDescription String? @default("Modern blog platformu")
  siteLogo    String?
  primaryColor String  @default("#3b82f6")
  secondaryColor String @default("#1e40af")
  accentColor String  @default("#f59e0b")
  backgroundColor String @default("#ffffff")
  textColor   String  @default("#1f2937")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("settings")
}